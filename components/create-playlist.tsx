'use client'
import { useState } from 'react'
import { Button } from '@/components/ui/button' // Using Shadcn button component
import {
  addSpotifyTracksToPlaylist,
  createSpotifyPlaylist,
  getSpotifyTrackRecommendations,
  getStravaActivities,
} from '@/app/actions'
import { Activity } from '@/interfaces/activities'
import StravaActivities from './strava-activities'
import { GenrePicker } from './genre-picker'
import { SpotifyTrack } from '@/interfaces/spotify'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from './ui/table'
import { formatSongDuration } from '@/utils/utils'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './ui/card'
import { useToast } from '@/components/hooks/use-toast'
import { ToastAction } from './ui/toast'
import Link from 'next/link'
import { createClient } from '@/utils/supabase/client'
import { redirect, useRouter } from 'next/navigation'

export default function CreatePlaylist({
  spotifyAccessToken,
}: {
  spotifyAccessToken: string
}) {
  const router = useRouter()
  const { toast } = useToast()
  const [step, setStep] = useState(1)
  const [stravaActivities, setStravaActivities] = useState<
    Activity[] | undefined
  >(undefined)
  const [spotifyRecommendations, setSpotifyRecommendations] = useState<
    SpotifyTrack[] | undefined
  >(undefined)
  const [selectedGenres, setSelectedGenres] = useState<string[]>([])
  const [averageCadence, setAverageCadence] = useState(0)
  const [selectedActivities, setSelectedActivites] = useState<Activity[]>([])

  const nextStep = () => {
    setStep((prevStep) => prevStep + 1)
  }
  const prevStep = () => {
    setStep((prevStep) => prevStep - 1)
  }

  const fetchStravaActivities = async (): Promise<void> => {
    setStravaActivities(await getStravaActivities(30))
  }

  const handleSelectedGenres = (data: string[]): void => {
    setSelectedGenres(data)
  }

  const handleSelectedActivities = (data: Activity[]): void => {
    setSelectedActivites(data)
  }

  const fetchSpotifyRecommendations = async (): Promise<void> => {
    const recommendations = await getSpotifyTrackRecommendations(
      spotifyAccessToken,
      selectedGenres,
      averageCadence
    )

    setSpotifyRecommendations(recommendations)
  }

  const calculateAverageCadence = (activities: Activity[]): void => {
    const totalCadence = activities.reduce(
      (acc, activity) => acc + activity.average_cadence,
      0
    )
    const average = totalCadence / activities.length
    setAverageCadence(average)
    nextStep()
  }

  const generatePlaylist = async (): Promise<void> => {
    const cadenceToBpm = (averageCadence * 2).toFixed(2)
    const minBpm = (averageCadence * 2 - 2).toFixed(2)
    const maxBpm = (averageCadence * 2 + 2).toFixed(2)
    const playlist = await createSpotifyPlaylist(
      spotifyAccessToken,
      `Cadence Beats generated playlist for ${cadenceToBpm} BPM`,
      `This playlist is generated by Cadence Beats and contains songs that have a BPM between ${minBpm} BPM and ${maxBpm} BPM`,
      false
    )

    if (!playlist) {
      toast({
        variant: 'destructive',
        title: 'Uh oh! Something went wrong.',
        description: 'There was a problem with your request. Try again later',
      })
      return
    }

    const response = await addSpotifyTracksToPlaylist(
      spotifyAccessToken,
      playlist.id,
      spotifyRecommendations!.map((recommendation) => recommendation.uri)
    )

    if (!response) {
      toast({
        variant: 'destructive',
        title: 'Uh oh! Something went wrong.',
        description: 'There was a problem with your request. Try again later',
      })
      return
    }

    const supabase = createClient()
    const { data } = await supabase
      .from('user_playlists')
      .insert({
        playlist_name: playlist.name,
        playlist_url: playlist.external_urls.spotify,
      })
      .select()

    if (data) {
      router.push(`/dashboard?playlist-created=${data[0].id}`)
      return
    }

    router.push(`/dashboard`)
  }

  return (
    <div>
      {step === 1 && (
        <Card className='w-full'>
          <CardHeader>
            <CardTitle>Step 1: Fetch and Select Strava Activities</CardTitle>
            <CardDescription>
              Let's first fetch your latest Strava activities.
              <br /> After that you can select which activities to use in
              calculating the average cadence
            </CardDescription>
          </CardHeader>
          <CardContent className='space-y-4'>
            {!stravaActivities && (
              <Button onClick={fetchStravaActivities}>Fetch Activities</Button>
            )}
            {stravaActivities && (
              <StravaActivities
                activities={stravaActivities}
                selectedActivities={selectedActivities}
                setSelectedActivities={handleSelectedActivities}
              />
            )}
          </CardContent>
          <CardFooter>
            <Button
              disabled={selectedActivities.length === 0}
              onClick={() => {
                calculateAverageCadence(selectedActivities)
              }}
            >
              Next
            </Button>
          </CardFooter>
        </Card>
      )}
      {step === 2 && (
        <Card>
          <CardHeader>
            <CardTitle>Step 2: Select Spotify Genre</CardTitle>
            <CardDescription>
              Then we would like to know your favorite genres
              <br />
              Note: unfortunately not all genres are supported
            </CardDescription>
          </CardHeader>
          <CardContent className='space-y-4'>
            <div>
              The average cadence for the selected activities is:{' '}
              {averageCadence.toFixed(2)}
            </div>
            <GenrePicker
              selectedGenres={selectedGenres}
              setSelectedGenres={handleSelectedGenres}
            />
          </CardContent>
          <CardFooter className='flex justify-start gap-4'>
            <Button onClick={prevStep}>Previous</Button>
            <Button disabled={selectedGenres.length === 0} onClick={nextStep}>
              Next
            </Button>
          </CardFooter>
        </Card>
      )}
      {step === 3 && (
        <Card>
          <CardHeader>
            <CardTitle>
              Step 3: Get Spotify Recommendations and Create Playlist
            </CardTitle>
            <CardDescription>
              Now, let's fetch the recommendations and create that perfect BPM
              playlist!
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className='flex gap-2 mb-4'>
              The selected genre{selectedGenres.length > 1 ? 's are' : ' is'}:
              {selectedGenres && <span>{selectedGenres.join(', ')}</span>}
            </div>
            {!spotifyRecommendations && (
              <Button onClick={fetchSpotifyRecommendations}>
                Fetch Recommendations
              </Button>
            )}
            {spotifyRecommendations && (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Title</TableHead>
                    <TableHead>Artists</TableHead>
                    <TableHead>Duration</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {spotifyRecommendations.map((recommendation, index) => {
                    return (
                      <TableRow key={index}>
                        <TableCell>{recommendation.name}</TableCell>
                        <TableCell>
                          {recommendation.artists
                            .map((artist) => artist.name)
                            .join(', ')}
                        </TableCell>
                        <TableCell>
                          {formatSongDuration(recommendation.duration_ms)}
                        </TableCell>
                      </TableRow>
                    )
                  })}
                </TableBody>
              </Table>
            )}
          </CardContent>
          {!spotifyRecommendations && (
            <CardFooter>
              <Button onClick={prevStep}>Previous</Button>
            </CardFooter>
          )}
          {spotifyRecommendations && (
            <CardFooter className='flex justify-center'>
              <Button
                className='bg-spotify text-xl font-bold hover:bg-strava hover:text-white'
                size='lg'
                onClick={generatePlaylist}
              >
                CREATE PLAYLIST!
              </Button>
            </CardFooter>
          )}
        </Card>
      )}
    </div>
  )
}
